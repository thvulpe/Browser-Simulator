# 🌐 Web Browser History Manager

This project simulates a basic tabbed web browser 🧭 with independent navigation history for each tab. Built as part of the **Data Structures and Algorithms** course at university 🎓, the assignment focuses on practicing stacks, doubly-linked lists, dynamic memory management, and modular design in C.

## 🚀 Features

- 🗂️ **Tabbed Browsing**: Create, switch, and close browser tabs
- 📄 **Page Navigation**: Navigate pages in each tab using `BACKWARD` and `FORWARD` stacks
- 🧠 **History Tracking**: Print full navigation history for any tab
- 🧼 **Memory-Safe**: Clean memory deallocation and fully Valgrind-safe ✅
- 📑 **Persistent Pages**: Pages are read from input and stored dynamically

## 📁 Project Structure
├── browser.h # Header file with data structures & function declarations
├── lista.c # Doubly linked list implementation for tab management
├── stiva.c # Stack implementation for backward/forward navigation
├── operatii_browser.c # Core browser operations (tab/page handling)
├── main.c # Input parsing and operation dispatcher
├── Makefile # Build automation
└── README.md # You're reading it!

## 🧱 Data Structures

- `page`: contains `id`, `url`, and a dynamically allocated `description`
- `tab`: stores the current page and two stacks (`backward`, `forward`)
- `browser`: tracks the current tab and holds all tabs in a circular doubly-linked list with a sentinel

## 🛠️ How It Works

1. Load saved pages into a dynamic array
2. Initialize the browser with a default page (ID 0, "https://acs.pub.ro/")
3. Process commands like:
   - `NEW_TAB`, `CLOSE`, `OPEN <ID>`
   - `NEXT`, `PREV`, `PAGE <ID>`
   - `BACKWARD`, `FORWARD`
   - `PRINT`, `PRINT_HISTORY <ID>`
4. Each command is parsed and dispatched via the `ProceseazaOperatie` function
5. Memory is released at the end, ensuring no leaks (each pointer is set to `NULL` after `free`)

## 📦 Build & Run

```bash
make build     # Compile the project
./tema1        # Run the program
make clean     # Clean compiled files
